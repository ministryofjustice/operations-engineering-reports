name: Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

env:
  KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
  KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
  ECR_NAME: ${{ secrets.ECR_NAME }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
  FLASK_APP_SECRET: ${{ secrets.FLASK_APP_SECRET }}
  OPS_ENG_REPORTS_ENCRYPT_KEY: ${{ secrets.OPS_ENG_REPORTS_ENCRYPT_KEY }}
  OPERATIONS_ENGINEERING_REPORTS_API_KEY: ${{ secrets.OPERATIONS_ENGINEERING_REPORTS_API_KEY }}

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: docker build -t foo -f Dockerfile.prod .
      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          region: eu-west-2
          local-image: foo
          image: ${ECR_NAME}:${{ github.sha }}
      - name: Update image tag and Template out any kube objects
        run: |
          export IMAGE_TAG=${{ github.sha }} && cat kubernetes_deployment/deployment.tpl | envsubst > kubernetes_deployment/deployment.yaml
          cat kubernetes_deployment/app_secrets.tpl | envsubst > kubernetes_deployment/app_secrets.yaml
      - name: Authenticate to the cluster
        env:
          KUBE_CERT: ${{ secrets.KUBE_CERT }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config get-contexts
          kubectl config use-context ${KUBE_CLUSTER}
      - name: Apply the updated manifest
        run: |
          kubectl -n ${KUBE_NAMESPACE} apply -f kubernetes_deployment/
      - name: Report failure to Slack
        if: always()
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notify_when: "failure"
          notification_title: "Failed GitHub Action Run"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
