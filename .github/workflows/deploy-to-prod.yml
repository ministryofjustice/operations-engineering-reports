name: Deploy to Prod

permissions:
  contents: write

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  KUBE_CLUSTER: ${{ secrets.PROD_KUBE_CLUSTER }}
  KUBE_NAMESPACE: ${{ secrets.PROD_KUBE_NAMESPACE }}
  KUBE_CERT: ${{ secrets.PROD_KUBE_CERT }}
  KUBE_TOKEN: ${{ secrets.PROD_KUBE_TOKEN }}

  IMAGE_TAG: ${{ github.ref_name }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.PRODUCTION_ECR_REPOSITORY }}

  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

  FLASK_APP_SECRET: ${{ secrets.PROD_FLASK_APP_SECRET }}
  OPS_ENG_REPORTS_ENCRYPT_KEY: ${{ secrets.PROD_OPS_ENG_REPORTS_ENCRYPT_KEY }}
  OPERATIONS_ENGINEERING_REPORTS_API_KEY: ${{ secrets.PROD_OPERATIONS_ENGINEERING_REPORTS_API_KEY }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PRODUCTION_ECR_ROLE_TO_ASSUME }}
          aws-region: eu-west-2

      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

  deploy-to-prod:
    needs: build-push
    runs-on: ubuntu-latest
    container: alpine/k8s:1.23.17
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Authenticate to the cluster
        run: |
          echo "${KUBE_CERT}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${KUBE_TOKEN}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config get-contexts
          kubectl config use-context ${KUBE_CLUSTER}

      - name: Helm install
        run: |
          helm upgrade operations-engineering-reports-prod \
            helm/operations-engineering-reports \
            --install \
            --atomic \
            --force \
            --wait \
            --namespace ${KUBE_NAMESPACE} \
            --set replicaCount=3 \
            --set image.tag=${IMAGE_TAG} \
            --set application.auth0ClientId=${AUTH0_CLIENT_ID} \
            --set application.auth0ClientSecret=${AUTH0_CLIENT_SECRET} \
            --set application.appSecretKey=${FLASK_APP_SECRET} \
            --set application.encryptionKey=${OPS_ENG_REPORTS_ENCRYPT_KEY} \
            --set application.apiKey=${OPERATIONS_ENGINEERING_REPORTS_API_KEY} \
            --set image.repository=${ECR_REGISTRY}/${ECR_REPOSITORY} \
            --set ingress.hosts={operations-engineering-reports-prod.cloud-platform.service.justice.gov.uk,operations-engineering-reports.cloud-platform.service.justice.gov.uk}

      - name: Report failure to Slack
        if: always()
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notify_when: "failure"
          notification_title: "Failed to deploy the reports application to production"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
